
ESPtoThingSpeak.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  000004fc  00000590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800184  00800184  00000614  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a83  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000782  00000000  00000000  0000114f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e3  00000000  00000000  000018d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000336  00000000  00000000  00002185  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000024bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 38       	cpi	r26, 0x85	; 133
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  9e:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USARTinit>:
#include <avr/interrupt.h>

void USARTinit (void)
{
	/* set baud rate */
	UBRR0H = (MYUBRR >> 8); //high value of baud rate
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = MYUBRR; //  low value of baud rate
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= (1 << RXEN0) | (1<<TXEN0);  //enable receiver and transmitter
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);			 // enable receiver input
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
	UCSR0C = ((1<<UCSZ01)|(1<<UCSZ00)); //asynchronous
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  c6:	08 95       	ret

000000c8 <ADCinit>:


volatile uint8_t ADCvalue; // Global Variable of the returned value from ADC
void ADCinit(void) // function for Initializing ADC
{
	ADMUX |= (1 << REFS0);	//use AVcc as ref
  c8:	ec e7       	ldi	r30, 0x7C	; 124
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 Prescale for 16MHz
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	87 60       	ori	r24, 0x07	; 7
  da:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // Set ADC Auto Trigger Enable
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	ADCSRB = 0; // Free running mode
  e2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRA |= (1 << ADEN); // Enable the ADC
  e6:	80 81       	ld	r24, Z
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // Enable interrupts	
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start conversion
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <USARTsend>:
}

void USARTsend(unsigned char Data) // function for sending data to the stream
{
	while (!(UCSR0A & (1<<UDRE0))); 
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	95 ff       	sbrs	r25, 5
 102:	fd cf       	rjmp	.-6      	; 0xfe <USARTsend+0x4>
	UDR0=Data;
 104:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 108:	08 95       	ret

0000010a <send_AT>:
}

void send_AT(unsigned char message[])
{
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while(message[i] != '\0')
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	59 f0       	breq	.+22     	; 0x12e <send_AT+0x24>
 118:	8f 01       	movw	r16, r30
 11a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		USARTsend(message[i]); // sends data to esp
 11c:	0e 94 7d 00 	call	0xfa	; 0xfa <USARTsend>
		i++;
 120:	cf 5f       	subi	r28, 0xFF	; 255
}

void send_AT(unsigned char message[])
{
	unsigned char i = 0;
	while(message[i] != '\0')
 122:	f8 01       	movw	r30, r16
 124:	ec 0f       	add	r30, r28
 126:	f1 1d       	adc	r31, r1
 128:	80 81       	ld	r24, Z
 12a:	81 11       	cpse	r24, r1
 12c:	f7 cf       	rjmp	.-18     	; 0x11c <send_AT+0x12>
	{
		USARTsend(message[i]); // sends data to esp
		i++;
	}
}
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <adcGO>:
	/*
	convert the read ADCvalue to temperature
	500.0=>(Vref * 100)=>(5V * 100)
	divide by 1024, the max for the ADC values (0-1024)
	*/
	ADCvalue = ADC; 
 136:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 13a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 13e:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
	ADCvalue = (ADCvalue)*(500.0/1024.0);
 142:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <__data_end>
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 83 01 	call	0x306	; 0x306 <__floatsisf>
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	4a ef       	ldi	r20, 0xFA	; 250
 156:	5e e3       	ldi	r21, 0x3E	; 62
 158:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__mulsf3>
 15c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__fixunssfsi>
 160:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <__data_end>
	
	/* converts value into ascii */
	temp = (ADCvalue/10);			//divide by 10 for tenths place digit
 164:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <__data_end>
	temperature[0] = temp + 48;		//add ASCII '0' 
	temp= (ADCvalue%10);			//modulo by 10 for ones place digit
 168:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <__data_end>
	temperature[1] = temp + 48;		//add ASCII '0' 
	SEND_DATA[44] = temperature[0];	// changes the send data integer value 
 16c:	e0 e0       	ldi	r30, 0x00	; 0
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	8d ec       	ldi	r24, 0xCD	; 205
 172:	98 9f       	mul	r25, r24
 174:	91 2d       	mov	r25, r1
 176:	11 24       	eor	r1, r1
 178:	96 95       	lsr	r25
 17a:	96 95       	lsr	r25
 17c:	96 95       	lsr	r25
 17e:	90 5d       	subi	r25, 0xD0	; 208
 180:	94 a7       	std	Z+44, r25	; 0x2c
	SEND_DATA[45] = temperature[1];	// changes the send data integer value
 182:	28 9f       	mul	r18, r24
 184:	81 2d       	mov	r24, r1
 186:	11 24       	eor	r1, r1
 188:	86 95       	lsr	r24
 18a:	86 95       	lsr	r24
 18c:	86 95       	lsr	r24
 18e:	88 0f       	add	r24, r24
 190:	98 2f       	mov	r25, r24
 192:	99 0f       	add	r25, r25
 194:	99 0f       	add	r25, r25
 196:	89 0f       	add	r24, r25
 198:	28 1b       	sub	r18, r24
 19a:	20 5d       	subi	r18, 0xD0	; 208
 19c:	25 a7       	std	Z+45, r18	; 0x2d
 19e:	08 95       	ret

000001a0 <main>:
}

int main(void)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	c3 55       	subi	r28, 0x53	; 83
 1aa:	d1 09       	sbc	r29, r1
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
	unsigned char AT[] = "AT\r\n";				// check if OK
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	e1 e3       	ldi	r30, 0x31	; 49
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	de 01       	movw	r26, r28
 1be:	11 96       	adiw	r26, 0x01	; 1
 1c0:	01 90       	ld	r0, Z+
 1c2:	0d 92       	st	X+, r0
 1c4:	8a 95       	dec	r24
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x20>
	unsigned char CIPMUX[] = "AT+CIPMUX=1\r\n"; // set to multiple connections
 1c8:	8e e0       	ldi	r24, 0x0E	; 14
 1ca:	e6 e3       	ldi	r30, 0x36	; 54
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	de 01       	movw	r26, r28
 1d0:	16 96       	adiw	r26, 0x06	; 6
 1d2:	01 90       	ld	r0, Z+
 1d4:	0d 92       	st	X+, r0
 1d6:	8a 95       	dec	r24
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x32>
	unsigned char CIPSTART[] = "AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80\r\n"; // starts connection to thingspeak
 1da:	8e e2       	ldi	r24, 0x2E	; 46
 1dc:	e4 e4       	ldi	r30, 0x44	; 68
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	de 01       	movw	r26, r28
 1e2:	54 96       	adiw	r26, 0x14	; 20
 1e4:	01 90       	ld	r0, Z+
 1e6:	0d 92       	st	X+, r0
 1e8:	8a 95       	dec	r24
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x44>
	unsigned char CIPSEND[] ="AT+CIPSEND=0,48\r\n"; // sends 48 bytes
 1ec:	82 e1       	ldi	r24, 0x12	; 18
 1ee:	e2 e7       	ldi	r30, 0x72	; 114
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	de 01       	movw	r26, r28
 1f4:	ae 5b       	subi	r26, 0xBE	; 190
 1f6:	bf 4f       	sbci	r27, 0xFF	; 255
 1f8:	01 90       	ld	r0, Z+
 1fa:	0d 92       	st	X+, r0
 1fc:	8a 95       	dec	r24
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x58>
	
	USARTinit();   //initialize USART
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <USARTinit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	89 e6       	ldi	r24, 0x69	; 105
 208:	98 e1       	ldi	r25, 0x18	; 24
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x6a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x74>
 214:	00 00       	nop
	_delay_ms(500);
	ADCinit();	   //initialize the ADC
 216:	0e 94 64 00 	call	0xc8	; 0xc8 <ADCinit>
	while(1)
	{
		adcGO();			// Get current ADC value
 21a:	0e 94 9b 00 	call	0x136	; 0x136 <adcGO>
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	83 ec       	ldi	r24, 0xC3	; 195
 222:	99 e0       	ldi	r25, 0x09	; 9
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x84>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x8e>
 22e:	00 00       	nop
		_delay_ms(200);
		send_AT(AT);
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	0e 94 85 00 	call	0x10a	; 0x10a <send_AT>
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	83 ed       	ldi	r24, 0xD3	; 211
 23c:	90 e3       	ldi	r25, 0x30	; 48
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x9e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0xa8>
 248:	00 00       	nop
		_delay_ms(1000);
		send_AT(CIPMUX);
 24a:	ce 01       	movw	r24, r28
 24c:	06 96       	adiw	r24, 0x06	; 6
 24e:	0e 94 85 00 	call	0x10a	; 0x10a <send_AT>
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	83 ed       	ldi	r24, 0xD3	; 211
 256:	90 e3       	ldi	r25, 0x30	; 48
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0xb8>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0xc2>
 262:	00 00       	nop
		
		_delay_ms(1000);
		send_AT(CIPSTART);
 264:	ce 01       	movw	r24, r28
 266:	44 96       	adiw	r24, 0x14	; 20
 268:	0e 94 85 00 	call	0x10a	; 0x10a <send_AT>
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	83 ed       	ldi	r24, 0xD3	; 211
 270:	90 e3       	ldi	r25, 0x30	; 48
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0xd2>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0xdc>
 27c:	00 00       	nop
		_delay_ms(1000);
		send_AT(CIPSEND);
 27e:	ce 01       	movw	r24, r28
 280:	8e 5b       	subi	r24, 0xBE	; 190
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	0e 94 85 00 	call	0x10a	; 0x10a <send_AT>
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	83 ed       	ldi	r24, 0xD3	; 211
 28c:	90 e3       	ldi	r25, 0x30	; 48
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0xee>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0xf8>
 298:	00 00       	nop
		_delay_ms(1000);
		send_AT(SEND_DATA);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 85 00 	call	0x10a	; 0x10a <send_AT>
 2a2:	bb cf       	rjmp	.-138    	; 0x21a <main+0x7a>

000002a4 <__fixunssfsi>:
 2a4:	0e 94 c6 01 	call	0x38c	; 0x38c <__fp_splitA>
 2a8:	88 f0       	brcs	.+34     	; 0x2cc <__fixunssfsi+0x28>
 2aa:	9f 57       	subi	r25, 0x7F	; 127
 2ac:	98 f0       	brcs	.+38     	; 0x2d4 <__fixunssfsi+0x30>
 2ae:	b9 2f       	mov	r27, r25
 2b0:	99 27       	eor	r25, r25
 2b2:	b7 51       	subi	r27, 0x17	; 23
 2b4:	b0 f0       	brcs	.+44     	; 0x2e2 <__fixunssfsi+0x3e>
 2b6:	e1 f0       	breq	.+56     	; 0x2f0 <__fixunssfsi+0x4c>
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	88 1f       	adc	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	1a f0       	brmi	.+6      	; 0x2c8 <__fixunssfsi+0x24>
 2c2:	ba 95       	dec	r27
 2c4:	c9 f7       	brne	.-14     	; 0x2b8 <__fixunssfsi+0x14>
 2c6:	14 c0       	rjmp	.+40     	; 0x2f0 <__fixunssfsi+0x4c>
 2c8:	b1 30       	cpi	r27, 0x01	; 1
 2ca:	91 f0       	breq	.+36     	; 0x2f0 <__fixunssfsi+0x4c>
 2cc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__fp_zero>
 2d0:	b1 e0       	ldi	r27, 0x01	; 1
 2d2:	08 95       	ret
 2d4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_zero>
 2d8:	67 2f       	mov	r22, r23
 2da:	78 2f       	mov	r23, r24
 2dc:	88 27       	eor	r24, r24
 2de:	b8 5f       	subi	r27, 0xF8	; 248
 2e0:	39 f0       	breq	.+14     	; 0x2f0 <__fixunssfsi+0x4c>
 2e2:	b9 3f       	cpi	r27, 0xF9	; 249
 2e4:	cc f3       	brlt	.-14     	; 0x2d8 <__fixunssfsi+0x34>
 2e6:	86 95       	lsr	r24
 2e8:	77 95       	ror	r23
 2ea:	67 95       	ror	r22
 2ec:	b3 95       	inc	r27
 2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__fixunssfsi+0x42>
 2f0:	3e f4       	brtc	.+14     	; 0x300 <__fixunssfsi+0x5c>
 2f2:	90 95       	com	r25
 2f4:	80 95       	com	r24
 2f6:	70 95       	com	r23
 2f8:	61 95       	neg	r22
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	8f 4f       	sbci	r24, 0xFF	; 255
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	08 95       	ret

00000302 <__floatunsisf>:
 302:	e8 94       	clt
 304:	09 c0       	rjmp	.+18     	; 0x318 <__floatsisf+0x12>

00000306 <__floatsisf>:
 306:	97 fb       	bst	r25, 7
 308:	3e f4       	brtc	.+14     	; 0x318 <__floatsisf+0x12>
 30a:	90 95       	com	r25
 30c:	80 95       	com	r24
 30e:	70 95       	com	r23
 310:	61 95       	neg	r22
 312:	7f 4f       	sbci	r23, 0xFF	; 255
 314:	8f 4f       	sbci	r24, 0xFF	; 255
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	99 23       	and	r25, r25
 31a:	a9 f0       	breq	.+42     	; 0x346 <__floatsisf+0x40>
 31c:	f9 2f       	mov	r31, r25
 31e:	96 e9       	ldi	r25, 0x96	; 150
 320:	bb 27       	eor	r27, r27
 322:	93 95       	inc	r25
 324:	f6 95       	lsr	r31
 326:	87 95       	ror	r24
 328:	77 95       	ror	r23
 32a:	67 95       	ror	r22
 32c:	b7 95       	ror	r27
 32e:	f1 11       	cpse	r31, r1
 330:	f8 cf       	rjmp	.-16     	; 0x322 <__floatsisf+0x1c>
 332:	fa f4       	brpl	.+62     	; 0x372 <__floatsisf+0x6c>
 334:	bb 0f       	add	r27, r27
 336:	11 f4       	brne	.+4      	; 0x33c <__floatsisf+0x36>
 338:	60 ff       	sbrs	r22, 0
 33a:	1b c0       	rjmp	.+54     	; 0x372 <__floatsisf+0x6c>
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	8f 4f       	sbci	r24, 0xFF	; 255
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	16 c0       	rjmp	.+44     	; 0x372 <__floatsisf+0x6c>
 346:	88 23       	and	r24, r24
 348:	11 f0       	breq	.+4      	; 0x34e <__floatsisf+0x48>
 34a:	96 e9       	ldi	r25, 0x96	; 150
 34c:	11 c0       	rjmp	.+34     	; 0x370 <__floatsisf+0x6a>
 34e:	77 23       	and	r23, r23
 350:	21 f0       	breq	.+8      	; 0x35a <__floatsisf+0x54>
 352:	9e e8       	ldi	r25, 0x8E	; 142
 354:	87 2f       	mov	r24, r23
 356:	76 2f       	mov	r23, r22
 358:	05 c0       	rjmp	.+10     	; 0x364 <__floatsisf+0x5e>
 35a:	66 23       	and	r22, r22
 35c:	71 f0       	breq	.+28     	; 0x37a <__floatsisf+0x74>
 35e:	96 e8       	ldi	r25, 0x86	; 134
 360:	86 2f       	mov	r24, r22
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	2a f0       	brmi	.+10     	; 0x372 <__floatsisf+0x6c>
 368:	9a 95       	dec	r25
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	88 1f       	adc	r24, r24
 370:	da f7       	brpl	.-10     	; 0x368 <__floatsisf+0x62>
 372:	88 0f       	add	r24, r24
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	97 f9       	bld	r25, 7
 37a:	08 95       	ret

0000037c <__fp_split3>:
 37c:	57 fd       	sbrc	r21, 7
 37e:	90 58       	subi	r25, 0x80	; 128
 380:	44 0f       	add	r20, r20
 382:	55 1f       	adc	r21, r21
 384:	59 f0       	breq	.+22     	; 0x39c <__fp_splitA+0x10>
 386:	5f 3f       	cpi	r21, 0xFF	; 255
 388:	71 f0       	breq	.+28     	; 0x3a6 <__fp_splitA+0x1a>
 38a:	47 95       	ror	r20

0000038c <__fp_splitA>:
 38c:	88 0f       	add	r24, r24
 38e:	97 fb       	bst	r25, 7
 390:	99 1f       	adc	r25, r25
 392:	61 f0       	breq	.+24     	; 0x3ac <__fp_splitA+0x20>
 394:	9f 3f       	cpi	r25, 0xFF	; 255
 396:	79 f0       	breq	.+30     	; 0x3b6 <__fp_splitA+0x2a>
 398:	87 95       	ror	r24
 39a:	08 95       	ret
 39c:	12 16       	cp	r1, r18
 39e:	13 06       	cpc	r1, r19
 3a0:	14 06       	cpc	r1, r20
 3a2:	55 1f       	adc	r21, r21
 3a4:	f2 cf       	rjmp	.-28     	; 0x38a <__fp_split3+0xe>
 3a6:	46 95       	lsr	r20
 3a8:	f1 df       	rcall	.-30     	; 0x38c <__fp_splitA>
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <__fp_splitA+0x30>
 3ac:	16 16       	cp	r1, r22
 3ae:	17 06       	cpc	r1, r23
 3b0:	18 06       	cpc	r1, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	f1 cf       	rjmp	.-30     	; 0x398 <__fp_splitA+0xc>
 3b6:	86 95       	lsr	r24
 3b8:	71 05       	cpc	r23, r1
 3ba:	61 05       	cpc	r22, r1
 3bc:	08 94       	sec
 3be:	08 95       	ret

000003c0 <__fp_zero>:
 3c0:	e8 94       	clt

000003c2 <__fp_szero>:
 3c2:	bb 27       	eor	r27, r27
 3c4:	66 27       	eor	r22, r22
 3c6:	77 27       	eor	r23, r23
 3c8:	cb 01       	movw	r24, r22
 3ca:	97 f9       	bld	r25, 7
 3cc:	08 95       	ret

000003ce <__mulsf3>:
 3ce:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__mulsf3x>
 3d2:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__fp_round>
 3d6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__fp_pscA>
 3da:	38 f0       	brcs	.+14     	; 0x3ea <__mulsf3+0x1c>
 3dc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fp_pscB>
 3e0:	20 f0       	brcs	.+8      	; 0x3ea <__mulsf3+0x1c>
 3e2:	95 23       	and	r25, r21
 3e4:	11 f0       	breq	.+4      	; 0x3ea <__mulsf3+0x1c>
 3e6:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__fp_inf>
 3ea:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__fp_nan>
 3ee:	11 24       	eor	r1, r1
 3f0:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_szero>

000003f4 <__mulsf3x>:
 3f4:	0e 94 be 01 	call	0x37c	; 0x37c <__fp_split3>
 3f8:	70 f3       	brcs	.-36     	; 0x3d6 <__mulsf3+0x8>

000003fa <__mulsf3_pse>:
 3fa:	95 9f       	mul	r25, r21
 3fc:	c1 f3       	breq	.-16     	; 0x3ee <__mulsf3+0x20>
 3fe:	95 0f       	add	r25, r21
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	55 1f       	adc	r21, r21
 404:	62 9f       	mul	r22, r18
 406:	f0 01       	movw	r30, r0
 408:	72 9f       	mul	r23, r18
 40a:	bb 27       	eor	r27, r27
 40c:	f0 0d       	add	r31, r0
 40e:	b1 1d       	adc	r27, r1
 410:	63 9f       	mul	r22, r19
 412:	aa 27       	eor	r26, r26
 414:	f0 0d       	add	r31, r0
 416:	b1 1d       	adc	r27, r1
 418:	aa 1f       	adc	r26, r26
 41a:	64 9f       	mul	r22, r20
 41c:	66 27       	eor	r22, r22
 41e:	b0 0d       	add	r27, r0
 420:	a1 1d       	adc	r26, r1
 422:	66 1f       	adc	r22, r22
 424:	82 9f       	mul	r24, r18
 426:	22 27       	eor	r18, r18
 428:	b0 0d       	add	r27, r0
 42a:	a1 1d       	adc	r26, r1
 42c:	62 1f       	adc	r22, r18
 42e:	73 9f       	mul	r23, r19
 430:	b0 0d       	add	r27, r0
 432:	a1 1d       	adc	r26, r1
 434:	62 1f       	adc	r22, r18
 436:	83 9f       	mul	r24, r19
 438:	a0 0d       	add	r26, r0
 43a:	61 1d       	adc	r22, r1
 43c:	22 1f       	adc	r18, r18
 43e:	74 9f       	mul	r23, r20
 440:	33 27       	eor	r19, r19
 442:	a0 0d       	add	r26, r0
 444:	61 1d       	adc	r22, r1
 446:	23 1f       	adc	r18, r19
 448:	84 9f       	mul	r24, r20
 44a:	60 0d       	add	r22, r0
 44c:	21 1d       	adc	r18, r1
 44e:	82 2f       	mov	r24, r18
 450:	76 2f       	mov	r23, r22
 452:	6a 2f       	mov	r22, r26
 454:	11 24       	eor	r1, r1
 456:	9f 57       	subi	r25, 0x7F	; 127
 458:	50 40       	sbci	r21, 0x00	; 0
 45a:	9a f0       	brmi	.+38     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 45c:	f1 f0       	breq	.+60     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 45e:	88 23       	and	r24, r24
 460:	4a f0       	brmi	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	bb 1f       	adc	r27, r27
 468:	66 1f       	adc	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	91 50       	subi	r25, 0x01	; 1
 470:	50 40       	sbci	r21, 0x00	; 0
 472:	a9 f7       	brne	.-22     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 474:	9e 3f       	cpi	r25, 0xFE	; 254
 476:	51 05       	cpc	r21, r1
 478:	80 f0       	brcs	.+32     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 47a:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__fp_inf>
 47e:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_szero>
 482:	5f 3f       	cpi	r21, 0xFF	; 255
 484:	e4 f3       	brlt	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 486:	98 3e       	cpi	r25, 0xE8	; 232
 488:	d4 f3       	brlt	.-12     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 48a:	86 95       	lsr	r24
 48c:	77 95       	ror	r23
 48e:	67 95       	ror	r22
 490:	b7 95       	ror	r27
 492:	f7 95       	ror	r31
 494:	e7 95       	ror	r30
 496:	9f 5f       	subi	r25, 0xFF	; 255
 498:	c1 f7       	brne	.-16     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 49a:	fe 2b       	or	r31, r30
 49c:	88 0f       	add	r24, r24
 49e:	91 1d       	adc	r25, r1
 4a0:	96 95       	lsr	r25
 4a2:	87 95       	ror	r24
 4a4:	97 f9       	bld	r25, 7
 4a6:	08 95       	ret

000004a8 <__fp_inf>:
 4a8:	97 f9       	bld	r25, 7
 4aa:	9f 67       	ori	r25, 0x7F	; 127
 4ac:	80 e8       	ldi	r24, 0x80	; 128
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	08 95       	ret

000004b4 <__fp_nan>:
 4b4:	9f ef       	ldi	r25, 0xFF	; 255
 4b6:	80 ec       	ldi	r24, 0xC0	; 192
 4b8:	08 95       	ret

000004ba <__fp_pscA>:
 4ba:	00 24       	eor	r0, r0
 4bc:	0a 94       	dec	r0
 4be:	16 16       	cp	r1, r22
 4c0:	17 06       	cpc	r1, r23
 4c2:	18 06       	cpc	r1, r24
 4c4:	09 06       	cpc	r0, r25
 4c6:	08 95       	ret

000004c8 <__fp_pscB>:
 4c8:	00 24       	eor	r0, r0
 4ca:	0a 94       	dec	r0
 4cc:	12 16       	cp	r1, r18
 4ce:	13 06       	cpc	r1, r19
 4d0:	14 06       	cpc	r1, r20
 4d2:	05 06       	cpc	r0, r21
 4d4:	08 95       	ret

000004d6 <__fp_round>:
 4d6:	09 2e       	mov	r0, r25
 4d8:	03 94       	inc	r0
 4da:	00 0c       	add	r0, r0
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__fp_round+0xc>
 4de:	88 23       	and	r24, r24
 4e0:	52 f0       	brmi	.+20     	; 0x4f6 <__fp_round+0x20>
 4e2:	bb 0f       	add	r27, r27
 4e4:	40 f4       	brcc	.+16     	; 0x4f6 <__fp_round+0x20>
 4e6:	bf 2b       	or	r27, r31
 4e8:	11 f4       	brne	.+4      	; 0x4ee <__fp_round+0x18>
 4ea:	60 ff       	sbrs	r22, 0
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <__fp_round+0x20>
 4ee:	6f 5f       	subi	r22, 0xFF	; 255
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	08 95       	ret

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
